"use strict";function Scrub(e){function r(){var r=t(e)?document.querySelectorAll(e.target)[0]:document.querySelectorAll(e)[0];try{!function(l){var n=t(e)?e.target:e;if(n=n.replace("#",""),n=n.replace(".",""),n.indexOf(".")>-1&&document.querySelectorAll(n).length>1&&console.warn("%cScrub Slider works best if you use an %cID%c or a %cunique%c class... ","color:cornflowerblue;","color:indianred;","color:cornflowerblue;","color:indianred;","color:cornflowerblue;"),void 0!=r){r.className+=" scrub-slider";var c=r.offsetWidth;null!=e.height&&(r.style.height=e.height);for(var o=r.children,a=0;a<2;a++){var i=o[a];o[a]&&i.tagName&&function(t,l,n){if("DIV"==l){var o=t.cloneNode(!0);t.parentNode.removeChild(t);var a=document.createElement("div");if(a.className=0==n?"scrub-content scrub-left":"scrub-content scrub-right",a.style.width=parseInt(c/2)+"px",r.insertBefore(a,r.firstChild),o.style.width=c+"px",null!=e.alt&&o.setAttribute("alt",0==n?e.alt[0]:e.alt[1]),null!=e.src){var i=0==n?e.src[0]:e.src[1];o.style.backgroundImage="url("+i+")"}a.append(o),""==t.style.backgroundImage&&console.warn("%cScrub Slider divs must have a %cbackground image to work!%c >:[","color:cornflowerblue;","color:indianred;","color:cornflowerblue;")}else if("IMG"==l){var s=document.createElement("div"),u=t.getAttribute("src");null!=e.src&&(u=0==n?e.src[0]:e.src[1]),t.parentNode.removeChild(t);var d=document.createElement("div");d.className=0==n?"scrub-content scrub-left":"scrub-content scrub-right",d.style.width=parseInt(c/2)+"px",null!=e.alt&&s.setAttribute("alt",0==n?e.alt[0]:e.alt[1]),r.insertBefore(d,r.firstChild),s.style.width=c+"px",s.style.backgroundImage="url("+u+")",d.append(s)}}(o[a],i.tagName,a)}l(r)}else console.warn("%cScrub Slider needs to be passed an appropriate selector %c- preferably an ID, but a specific, unique class works too.","color:cornflowerblue;","color:indianred;")}(function(r){var t=document.createElement("div");t.className="sliding handleOn ",t.innerHTML='<span class="sliding-left"></span><span class="sliding-right"></span>',r.appendChild(t),0==e.handle&&(t.innerHTML="",t.classList.remove("handleOn"));var l=function(e,r,t){var l;return function(){var n=this,c=arguments,o=function(){l=null,t||e.apply(n,c)},a=t&&!l;clearTimeout(l),l=setTimeout(o,r),a&&e.apply(n,c)}}(function(e,r,l){if(t){var n=r-e;l.querySelectorAll(".sliding")[0].style.left=(e>0?e:0)+"px";l.querySelectorAll(".scrub-left")[0].style.width=(e>0?e:0)+"px";l.querySelectorAll(".scrub-right")[0].style.width=(n>0?n:0)+"px"}},10);r.addEventListener("mousemove",function(e){var t=e.clientX-this.offsetLeft,n=r.offsetWidth;l(t,n,r)})})}catch(e){console.trace("%cuh-oh: %c"+e,"color:indianred;","color:cornflowerblue;")}}var t=function(e){return!!e&&e.constructor===Object};t(e)?(e.target=void 0!==e.target&&t(e)?e.target:null,e.height=void 0!==e.height&&t(e)?e.height:"500px",e.handle=void 0===e.handle||!t(e)||e.handle,e.src=void 0!==e.src&&t(e)?e.src:null,e.alt=void 0!==e.alt&&t(e)?e.alt:null,r()):r()}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
