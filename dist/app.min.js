"use strict";Scrub("#slider1"),Scrub("#slider2"),Scrub(".slider3"),Scrub("nonexistent");
"use strict";function Scrub(e){try{!function(r){var c=document.querySelectorAll(e)[0],t=c.offsetWidth;if(e.indexOf(".")>-1&&document.querySelectorAll(e).length>1&&console.warn("%cScrubber Slider works best if you use an %cID%c or a %cunique%c class... ","color:cornflowerblue;","color:indianred;","color:cornflowerblue;","color:indianred;","color:cornflowerblue;"),void 0!=c){c.className+=" scrub-slider";for(var l=c.children,n=0;n<2;n++){var o=l[n];l[n]&&o.tagName&&function(e,r,l){if("DIV"==r){var n=e.cloneNode(!0);e.parentNode.removeChild(e);var o=document.createElement("div");o.className=0==l?"scrub-content scrub-left":"scrub-content scrub-right",c.insertBefore(o,c.firstChild),n.style.width=t+"px",o.append(n),""==e.style.backgroundImage&&console.warn("%cScrubber Slider divs must have a %cbackground image%c >:[","color:cornflowerblue;","color:indianred;","color:cornflowerblue;")}else if("IMG"==r){var i=document.createElement("div"),s=e.getAttribute("src");e.parentNode.removeChild(e);var a=document.createElement("div");a.className=0==l?"scrub-content scrub-left":"scrub-content scrub-right",c.insertBefore(a,c.firstChild),i.style.width=t+"px",i.style.backgroundImage="url("+s+")",a.append(i)}}(l[n],o.tagName,n)}r(c)}}(function(e){function r(e,r,t){if(c){var l=r-e;t.querySelectorAll(".sliding")[0].style.left=(e>0?e:0)+"px";t.querySelectorAll(".scrub-left")[0].style.width=(e>0?e:0)+"px";t.querySelectorAll(".scrub-right")[0].style.width=(l>0?l:0)+"px"}}var c=document.createElement("div");c.className="sliding",c.innerHTML='<span class="sliding-left"></span><span class="sliding-right"></span>',e.appendChild(c),e.addEventListener("mousemove",function(c){r(c.clientX,e.offsetWidth,e)})})}catch(e){console.error("uh-oh: "+e)}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
